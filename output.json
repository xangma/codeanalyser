{
  "codemap": [
    {
      "file": "C:\\Users\\username\\codeanalyser\\example_code.py",
      "functions": [
        {
          "name": "foo",
          "lineno": 5,
          "signature": "(a, b)",
          "doc": null,
          "calls": [],
          "source_code": "def foo(a, b):\n    # A simple function that adds two numbers.\n    c = a + b\n    return c"
        },
        {
          "name": "bar",
          "lineno": 10,
          "signature": "(x)",
          "doc": null,
          "calls": [],
          "source_code": "def bar(x):\n    # Multiplies x by 2.\n    y = x * 2\n    return y"
        },
        {
          "name": "worker_task",
          "lineno": 25,
          "signature": "(n)",
          "doc": null,
          "calls": [
            "time.sleep"
          ],
          "source_code": "def worker_task(n):\n    # A function meant to run in a worker process.\n    time.sleep(1)\n    x = n ** 2\n    return x"
        },
        {
          "name": "main",
          "lineno": 31,
          "signature": "()",
          "doc": null,
          "calls": [
            "concurrent.futures.as_completed",
            "foo",
            "Baz",
            "range",
            "baz.compute",
            "executor.submit",
            "concurrent.futures.ProcessPoolExecutor",
            "future.result",
            "print"
          ],
          "source_code": "def main():\n    # Some variables in the main function.\n    a = 10\n    b = 20\n    s = \"Hello, world!\"\n    \n    # Call a couple of functions.\n    result = foo(a, b)\n    print(\"foo result:\", result)\n    \n    # Create an instance of Baz and use it.\n    baz = Baz(result)\n    computed = baz.compute(3)\n    print(\"Baz computed:\", computed)\n    \n    # Use a process pool to run a task concurrently.\n    with concurrent.futures.ProcessPoolExecutor() as executor:\n        futures = [executor.submit(worker_task, i) for i in range(3)]\n        for future in concurrent.futures.as_completed(futures):\n            print(\"Worker result:\", future.result())"
        }
      ],
      "classes": [
        {
          "name": "Baz",
          "lineno": 15,
          "doc": null,
          "methods": [
            {
              "name": "__init__",
              "lineno": 16,
              "signature": "(self, value)",
              "doc": null,
              "calls": [],
              "source_code": "    def __init__(self, value):\n        # Save the given value.\n        self.value = value"
            },
            {
              "name": "compute",
              "lineno": 20,
              "signature": "(self, factor)",
              "doc": null,
              "calls": [],
              "source_code": "    def compute(self, factor):\n        # Multiply the stored value by the factor.\n        result = self.value * factor\n        return result"
            }
          ]
        }
      ]
    }
  ],
  "variable_examples": {
    "foo": {
      "example": "<function foo at 0x000001D030779760>",
      "functions": [
        "global"
      ]
    },
    "bar": {
      "example": "<function bar at 0x000001D0307E0C20>",
      "functions": [
        "global"
      ]
    },
    "Baz": {
      "example": "<class '__main__.Baz'>",
      "functions": [
        "global"
      ]
    },
    "worker_task": {
      "example": "<function worker_task at 0x000001D0307E0CC0>",
      "functions": [
        "global"
      ]
    },
    "main": {
      "example": "<function main at 0x000001D0307E0EA0>",
      "functions": [
        "global"
      ]
    },
    "a": {
      "example": 10,
      "functions": [
        "main (captured)"
      ]
    },
    "b": {
      "example": 20,
      "functions": [
        "main (captured)"
      ]
    },
    "s": {
      "example": "Hello, world!",
      "functions": [
        "main (captured)"
      ]
    },
    "result": {
      "example": 30,
      "functions": [
        "main (captured)"
      ]
    },
    "baz": {
      "example": "<__main__.Baz object at 0x000001D0306FFE30>",
      "functions": [
        "main (captured)"
      ]
    },
    "computed": {
      "example": 90,
      "functions": [
        "main (captured)"
      ]
    },
    "executor": {
      "example": "<__main__.PatchedProcessPoolExecutor object at 0x000001D02E8ABFB0>",
      "functions": [
        "main (captured)"
      ]
    },
    "futures": {
      "example": "[<Future at 0x1d0307c7c50 state=finished returned int>, <Future at 0x1d0307f4d70 state=finished returned int>, <Future at 0x1d0307f5160 state=finished returned int>]",
      "functions": [
        "main (captured)"
      ]
    },
    "future": {
      "example": "<Future at 0x1d0307f5160 state=finished returned int>",
      "functions": [
        "main (captured)"
      ]
    },
    "self": {
      "example": "<Thread(Thread-1 (run_target_program), started 52436)>",
      "functions": [
        "join",
        "run",
        "_bootstrap",
        "_wait_for_tstate_lock",
        "_bootstrap_inner"
      ]
    },
    "block": {
      "example": true,
      "functions": [
        "_wait_for_tstate_lock"
      ]
    },
    "timeout": {
      "example": 10,
      "functions": [
        "join",
        "_wait_for_tstate_lock"
      ]
    },
    "lock": {
      "example": "<locked _thread.lock object at 0x000001D02E8DD9C0>",
      "functions": [
        "_wait_for_tstate_lock"
      ]
    }
  }
}